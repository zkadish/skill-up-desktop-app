import React, { useState, useRef, useEffect } from 'react';
import { object } from 'prop-types';
import Paper from '@mui/material/Paper';
import InputBase from '@mui/material/InputBase';
import SearchIcon from '@mui/icons-material/Search';
import CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  IconButton,
  Box,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { searchHTML } from './search';

import classes from './History.styles';

const History = (props) => {
  const { activeCall, domainHistory } = props;

  const [callHistory, setCallHistory] = useState([]);
  const [accordionState, setAccordionState] = useState(null);
  const [searchKey, setSearchKey] = useState('');

  const historyHTML = useRef(null);

  useEffect(() => {
    if (!activeCall) return;
    // TODO: convert back when history is being generated by CallEvents
    // const history = domainHistory[activeCall.domain_id];
    const history = domainHistory.rockettech;
    setCallHistory(history);

    const initialAccordionState = {};
    history.forEach((event) => {
      const { id } = event;
      initialAccordionState[id] = false;
    });
    setAccordionState(initialAccordionState);

    // reset field values
    return () => { // eslint-disable-line
      setAccordionState(null);
    };
  }, [activeCall]);

  const onChangeAccordion = (event) => (e, toggle) => {
    setAccordionState({
      ...accordionState,
      [event.id]: toggle,
    });
  };

  const onChangeSearchInput = (e) => {
    const key = e.target.value.trimStart();
    setSearchKey(key);

    searchHTML(historyHTML.current, key);
  };

  const onClickClearSearch = () => {
    setSearchKey('');

    searchHTML(historyHTML.current, '');
  };

  return (
    <>
      {activeCall && (
        <>
          <Paper sx={{ ...classes.root }} elevation={3}>
            <Typography variant="h6">{`Domain: @${activeCall.domain_id}`}</Typography>
            <Box className="menu">
              <Box className="search">
                <InputBase
                  placeholder="Search call historyâ€¦"
                  sx={{ ...classes.input }}
                  value={searchKey}
                  onChange={onChangeSearchInput}
                  inputProps={{ 'aria-label': 'search' }}
                />
                {!searchKey && (
                  <Box className="searchIcon">
                    <SearchIcon />
                  </Box>
                )}
                {!!searchKey && (
                  <Box className="cancelIcon">
                    <IconButton onClick={onClickClearSearch} size="large">
                      <CancelOutlinedIcon />
                    </IconButton>
                  </Box>
                )}
              </Box>
              <Box sx={{ flexGrow: 1 }} />
            </Box>
          </Paper>
          <Box sx={{ ...classes.scrollingLayout }}>
            <Box ref={historyHTML} id="scroll-area">
              {callHistory?.map((event) => {
                return (
                  <Accordion
                    key={event.id}
                    sx={{ ...classes.accordion }}
                    expanded={accordionState[event.id]}
                    onChange={onChangeAccordion(event)}
                    elevation={0}
                  >
                    <AccordionSummary
                      sx={{ ...classes.accordionSummary }}
                      expandIcon={<ExpandMoreIcon />}
                      aria-controls="panel1a-content"
                      id="panel1a-header"
                    >
                      <Typography sx={{ ...classes.accordionHeading }}>
                        {event.summary}
                      </Typography>
                      <Typography sx={{ ...classes.accordionHeading }}>
                        {`${event.start.date} - ${event.start.dateTime} to ${event.end.dateTime}`}
                      </Typography>
                    </AccordionSummary>
                    <AccordionDetails sx={{ ...classes.accordionDetails }}>
                      <Box className="callHistory">
                        <Box className="leftCol">
                          {event?.frameworkTemplate?.blocks.map((block) => {
                            return (
                              <Box key={block.id} className="blockContainer">
                                <Box className="blockLabel">{block.label}</Box>
                                {event?.frameworkTemplate?.elements?.[
                                  block.id
                                ].map((element) => {
                                  if (block.id === 'attendees') {
                                    return (
                                      <Box
                                        key={element.email}
                                        className="element"
                                      >
                                        {`${element.responseStatus} - ${element.displayName} - ${element.email}`}
                                      </Box>
                                    );
                                  }
                                  if (block.id === 'actions') {
                                    return (
                                      <Box key={element.id} className="element">
                                        {`${element.value} - ${element.label}`}
                                      </Box>
                                    );
                                  }
                                  if (block.id === 'notes') {
                                    return (
                                      <Box key={element.id} className="element">
                                        {element.value}
                                      </Box>
                                    );
                                  }
                                  if (element.type === 'research-field') {
                                    return (
                                      <Box key={element.id} className="element">
                                        {`${element.label} - ${element.value}`}
                                      </Box>
                                    );
                                  }
                                  if (element.type === 'question-answer') {
                                    return (
                                      <Box key={element.id}>
                                        <Box className="element">
                                          {`Q: ${element.label}`}
                                        </Box>
                                        <Box className="element">
                                          {`A: ${element.value}`}
                                        </Box>
                                      </Box>
                                    );
                                  }
                                  if (element.type === 'check-list') {
                                    return (
                                      <Box key={element.id} className="element">
                                        {`${element.value} - ${element.label}`}
                                      </Box>
                                    );
                                  }
                                  return null;
                                })}
                              </Box>
                            );
                          })}
                        </Box>
                      </Box>
                    </AccordionDetails>
                  </Accordion>
                );
              })}
            </Box>
          </Box>
        </>
      )}
    </>
  );
};

History.propTypes = {
  domainHistory: object, // eslint-disable-line
  activeCall: object, // eslint-disable-line
  callResearch: object  // eslint-disable-line
};

History.defaultProps = {
  activeCall: {},
};

export default History;
